{
  "name": "combohandler",
  "description": "Simple Yahoo!-style combo handler.",
  "version": "0.2.2",
  "keywords": [
    "combo",
    "combohandler",
    "combohandle",
    "combine",
    "cdn",
    "css",
    "yui"
  ],
  "homepage": "https://github.com/rgrove/combohandler",
  "repository": {
    "type": "git",
    "url": "git://github.com/rgrove/combohandler.git"
  },
  "author": {
    "name": "Ryan Grove",
    "email": "ryan@wonko.com",
    "url": "http://wonko.com/"
  },
  "engines": [
    "node >=0.8"
  ],
  "dependencies": {
    "express": "3.2.x",
    "URIjs": "1.10.1"
  },
  "devDependencies": {
    "istanbul": "~0.1.34",
    "mocha": "1.9.0",
    "request": "~2.9",
    "should": "1.2.0"
  },
  "main": "index.js",
  "directories": {
    "lib": "./lib"
  },
  "scripts": {
    "test": "istanbul test --print both ./node_modules/mocha/bin/_mocha"
  },
  "readme": "Combo Handler\n=============\n\n[![Build Status](https://travis-ci.org/rgrove/combohandler.png?branch=master)](https://travis-ci.org/rgrove/combohandler)\n\nThis is a simple combo handler for Node.js, usable either as [Connect][]\nmiddleware or as an [Express][] server. It works just like the combo handler\nservice on the Yahoo! CDN, which you'll be familiar with if you've used YUI.\n\nThe combo handler is compatible with the [YUI][] Loader, so you can use it to\nhost YUI, or you can use it with any other JavaScript or CSS if you're willing\nto construct the combo URLs yourself.\n\nThe combo handler itself doesn't perform any caching or compression, but stick\n[Nginx][] or something in front of it and you should be ready to rock in\nproduction.\n\n[Connect]: https://github.com/senchalabs/connect\n[Express]: https://github.com/visionmedia/express\n[Nginx]: http://nginx.org/\n[YUI]: http://yuilibrary.com/\n\n\nInstallation\n------------\n\nInstall using npm:\n\n    npm install combohandler\n\nOr just clone the [GitHub repo](https://github.com/rgrove/combohandler):\n\n    git clone git://github.com/rgrove/combohandler.git\n\n\nUsage\n-----\n\nThe `combohandler` module provides a configurable Connect middleware that can be\nused to add combo handling capability to any Connect-based request handler (like\nExpress).\n\nThe `combohandler/lib/server` module creates a standalone Express server instance,\nor augments an existing server, to perform combo handling for a set of\nconfigurable routes.\n\n\n### As Express middleware\n\nThe combo handler middleware can be used as application-wide middleware for all\nroutes:\n\n```js\nvar combo = require('combohandler');\napp.use(combo.combine({rootPath: '/local/path/to/files'}));\n```\n\nOr as route middleware for a specific route:\n\n```js\napp.get('/foo', combo.combine({rootPath: '/local/path/to/foo'}), combo.respond);\n```\n\nIn either case, the middleware will perform combo handling for files under the\nspecified local `rootPath` when requested using a URL with one or more file paths\nin the query string:\n\n    http://example.com/<route>?<path>[&path][...]\n\nFor example:\n\n    http://example.com/foo?file1.js\n    http://example.com/foo?file1.js&file2.js\n    http://example.com/foo?file1.js&file2.js&subdir/file3.js\n\nAttempts to traverse above the `rootPath` or to request a file that doesn't\nexist will result in a `BadRequest` error being bubbled up.\n\nHere's a basic Express app that uses the combo handler as route middleware for\nmultiple routes with different root paths:\n\n```js\nvar combo   = require('combohandler'),\n    express = require('express'),\n\n    app = express();\n\napp.configure(function () {\n  app.use(express.errorHandler());\n});\n\n// Return a 400 response if the combo handler generates a BadRequest error.\napp.use(function (err, req, res, next) {\n    if (err instanceof combo.BadRequest) {\n        res.charset = 'utf-8';\n        res.type('text/plain');\n        res.send(400, 'Bad request. ' + err.message);\n    } else {\n        next(err);\n    }\n});\n\n// Given a root path that points to a YUI 3 root folder, this route will\n// handle URLs like:\n//\n// http://example.com/yui3?build/yui/yui-min.js&build/loader/loader-min.js\n//\napp.get('/yui3', combo.combine({rootPath: '/local/path/to/yui3'}), combo.respond);\n\napp.listen(3000);\n```\n\n#### `combo.respond`\n\nThe `respond` method exported by `require('combohandler')` is a convenience method intended to be the last callback passed to an [express route](http://expressjs.com/api.html#app.VERB). Unless you have a *very* good reason to avoid it, you should probably use it. Here is the equivalent callback:\n\n```js\nfunction respond(req, res) {\n    res.send(res.body);\n}\n```\n\nThis method may be extended in the future to do fancy things with optional combohandler middleware.\n\n### Creating a server\n\nIf you just want to get a server up and running quickly by specifying a mapping\nof routes to local root paths, use the `combohandler/lib/server` module. It\ncreates a barebones Express server that will perform combo handling on the\nroutes you specify:\n\n```js\nvar comboServer = require('combohandler/lib/server'),\n    app;\n\napp = comboServer({\n    roots: {\n        '/yui3': '/local/path/to/yui3'\n    }\n});\n\napp.listen(3000);\n```\n\n### Augmenting an existing server\n\nIf you already have an existing Express server instance and just want to add\nsome combo handled routes to it easily, you can augment your existing server\nwith combo handled routes:\n\n```js\nvar comboServer = require('combohandler/lib/server');\n\ncomboServer({\n    roots: {\n        '/yui3': '/local/path/to/yui3'\n    }\n}, myApp); // Assuming `myApp` is a pre-existing Express server instance.\n```\n\n### Running the included standalone server\n\nIf you clone or download the GitHub repo, you can rename `config.sample.js` to\n`config.js`, edit it to your liking, and then simply run `app.js` to start a\nstandalone server in development mode on port 8000.\n\n    git clone git://github.com/rgrove/combohandler.git\n    cd combohandler\n    mv config.sample.js config.js\n    ./app.js\n\nTo run the standalone server in production mode, set the `NODE_ENV` variable to\n`production` before running it:\n\n    NODE_ENV=production ./app.js\n\n\n### Rewriting URLs in CSS files\n\nBecause the combo handler changes the path from which CSS files are loaded,\nrelative URLs in CSS files need to be updated to be relative to the\ncombohandled path. Set the `basePath` configuration option to have the combo\nhandler do this automatically.\n\n```js\n// This static route can be used to load images and other assets that shouldn't\n// be combined.\n//\napp.use('/public', express.static(__dirname + '/public'));\n\n// This route will combine requests for files in the public directory, and will\n// also automatically rewrite relative paths in CSS files to point to the\n// non-combohandled static route defined above.\n//\napp.get('/combo', combo.combine({\n    rootPath: __dirname + '/public',\n    basePath: '/public'\n}), combo.respond);\n```\n\nAlternatively, you can use the built-in `cssUrls` middleware as a separate\nroute callback. `cssUrls` must always be placed after the default `combine`\nmiddleware when used in this fashion.\n\n```js\n// This route provides the same behaviour as the previous example, providing\n// better separation of concerns and the possibility of inserting custom\n// middleware between the built-in steps.\napp.get('/combo',\n    combo.combine({\n        rootPath: __dirname + '/public'\n    }),\n    combo.cssUrls({\n        basePath: '/public'\n    }),\n    combo.respond);\n```\n\nFinally, the `cssUrls` middleware has the ability (disabled by default) to\nrewrite `@import` paths in the same manner as `url()` values. As `@import` is\nconsidered an anti-pattern in production code, this functionality is strictly\nopt-in and requires passing `true` as the `rewriteImports` property in the\nmiddleware options object.\n\n```js\n// Automagically\napp.get('/combo', combo.combine({\n    rootPath: __dirname + '/public',\n    basePath: '/public',\n    rewriteImports: true\n}), combo.respond);\n\n// As explicit middleware\napp.get('/combo',\n    combo.combine({ rootPath: __dirname + '/public' }),\n    combo.cssUrls({ basePath: '/public', rewriteImports: true }),\n    combo.respond);\n```\n\n### Dynamic Paths via Route Parameters\n\nTo enable resolution of dynamic subtree paths under a given `rootPath`, simply add a [route parameter](http://expressjs.com/api.html#req.params) to both the route and the `rootPath` config.\n\n```js\napp.get('/combo/yui/:version', combo.combine({\n    rootPath: '/local/path/to/yui/:version/build'\n}), combo.respond);\n```\n\nGiven this config, any [YUI release tarball](http://yuilibrary.com/download/yui3/) you explode into a versioned subdirectory of `/local/path/to/yui/` would be available under a much shorter URL than the default config provides:\n\n    http://example.com/combo/yui/3.9.1?yui/yui-min.js&yui-throttle/yui-throttle-min.js\n    // vs\n    http://example.com/combo/yui?3.9.1/build/yui/yui-min.js&3.9.1/build/yui-throttle/yui-throttle-min.js\n\nIf the built-in `dynamicPath` middleware is used manually, it _must_ be inserted *before* the default `combine` middleware.\n\nUsing as a YUI 3 combo handler\n------------------------------\n\nWith a tiny bit of configuration, you can tell YUI to use your custom combo\nhandler instead of the Yahoo! combo handler. Here's an example:\n\n```html\n<script src=\"http://example.com/combo/yui3?build/yui/yui-min.js\"></script>\n<script>\nYUI({\n    comboBase: 'http://example.com/combo/yui3?',\n    combine  : true,\n    root     : 'build/'\n}).use('node', function (Y) {\n    // YUI will now automatically load modules from the custom combo handler.\n});\n</script>\n```\n\n\nLicense\n-------\n\nCopyright (c) 2012 Yahoo! Inc. All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "combohandler@0.2.2",
  "dist": {
    "shasum": "d6c447cdf6dcc6ce2b519261f670e3452a88a40d",
    "tarball": "http://registry.npmjs.org/combohandler/-/combohandler-0.2.2.tgz"
  },
  "_npmVersion": "1.1.66",
  "_npmUser": {
    "name": "evocateur",
    "email": "daniel.stockman@gmail.com"
  },
  "maintainers": [
    {
      "name": "rgrove",
      "email": "ryan@wonko.com"
    },
    {
      "name": "evocateur",
      "email": "daniel.stockman@gmail.com"
    }
  ],
  "_shasum": "d6c447cdf6dcc6ce2b519261f670e3452a88a40d",
  "_from": "combohandler@~0.2.0",
  "_resolved": "https://registry.npmjs.org/combohandler/-/combohandler-0.2.2.tgz",
  "bugs": {
    "url": "https://github.com/rgrove/combohandler/issues"
  }
}
